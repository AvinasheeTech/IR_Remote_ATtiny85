
IR_Remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000b54  00000be8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800068  00800068  00000bf0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bf0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001185  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000063f  00000000  00000000  00001e59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000073c  00000000  00000000  00002498  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e4  00000000  00000000  00002bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ef  00000000  00000000  00002eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000133f  00000000  00000000  000033a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000046e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
   2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
   4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
   6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
   8:	35 c0       	rjmp	.+106    	; 0x74 <__vector_4>
   a:	33 c0       	rjmp	.+102    	; 0x72 <__bad_interrupt>
   c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
   e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
  10:	30 c0       	rjmp	.+96     	; 0x72 <__bad_interrupt>
  12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
  14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
  16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
  18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
  1a:	2b c0       	rjmp	.+86     	; 0x72 <__bad_interrupt>
  1c:	2a c0       	rjmp	.+84     	; 0x72 <__bad_interrupt>
  1e:	df c1       	rjmp	.+958    	; 0x3de <ir_sequence_ACtemp+0x28>
  20:	01 c2       	rjmp	.+1026   	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
  22:	23 c2       	rjmp	.+1094   	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
  24:	44 c2       	rjmp	.+1160   	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
  26:	66 c2       	rjmp	.+1228   	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
  28:	88 c2       	rjmp	.+1296   	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
  2a:	aa c2       	rjmp	.+1364   	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
  2c:	cc c2       	rjmp	.+1432   	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
  2e:	ee c2       	rjmp	.+1500   	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
  30:	10 c3       	rjmp	.+1568   	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
  32:	32 c3       	rjmp	.+1636   	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
  34:	54 c3       	rjmp	.+1704   	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
  36:	75 c3       	rjmp	.+1770   	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
  38:	96 c3       	rjmp	.+1836   	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
  3a:	b8 c3       	rjmp	.+1904   	; 0x7ac <__LOCK_REGION_LENGTH__+0x3ac>

0000003c <__ctors_end>:
  3c:	11 24       	eor	r1, r1
  3e:	1f be       	out	0x3f, r1	; 63
  40:	cf e5       	ldi	r28, 0x5F	; 95
  42:	d2 e0       	ldi	r29, 0x02	; 2
  44:	de bf       	out	0x3e, r29	; 62
  46:	cd bf       	out	0x3d, r28	; 61

00000048 <__do_copy_data>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	e4 e5       	ldi	r30, 0x54	; 84
  50:	fb e0       	ldi	r31, 0x0B	; 11
  52:	02 c0       	rjmp	.+4      	; 0x58 <__do_copy_data+0x10>
  54:	05 90       	lpm	r0, Z+
  56:	0d 92       	st	X+, r0
  58:	a8 36       	cpi	r26, 0x68	; 104
  5a:	b1 07       	cpc	r27, r17
  5c:	d9 f7       	brne	.-10     	; 0x54 <__do_copy_data+0xc>

0000005e <__do_clear_bss>:
  5e:	20 e0       	ldi	r18, 0x00	; 0
  60:	a8 e6       	ldi	r26, 0x68	; 104
  62:	b0 e0       	ldi	r27, 0x00	; 0
  64:	01 c0       	rjmp	.+2      	; 0x68 <.do_clear_bss_start>

00000066 <.do_clear_bss_loop>:
  66:	1d 92       	st	X+, r1

00000068 <.do_clear_bss_start>:
  68:	a0 37       	cpi	r26, 0x70	; 112
  6a:	b2 07       	cpc	r27, r18
  6c:	e1 f7       	brne	.-8      	; 0x66 <.do_clear_bss_loop>
  6e:	68 d4       	rcall	.+2256   	; 0x940 <main>
  70:	6f c5       	rjmp	.+2782   	; 0xb50 <_exit>

00000072 <__bad_interrupt>:
  72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <__vector_4>:
 *@brief : TIM1 ISR function 
 *@param : TIM OVF interrupt vector
 *@retval : None
 *@note : counter for milliseconds
************************************************************************/
ISR(TIM1_OVF_vect){
  74:	1f 92       	push	r1
  76:	0f 92       	push	r0
  78:	0f b6       	in	r0, 0x3f	; 63
  7a:	0f 92       	push	r0
  7c:	11 24       	eor	r1, r1
  7e:	8f 93       	push	r24
  80:	9f 93       	push	r25
  82:	af 93       	push	r26
  84:	bf 93       	push	r27
	millis++;
  86:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <millis>
  8a:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <millis+0x1>
  8e:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <millis+0x2>
  92:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <millis+0x3>
  96:	01 96       	adiw	r24, 0x01	; 1
  98:	a1 1d       	adc	r26, r1
  9a:	b1 1d       	adc	r27, r1
  9c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <millis>
  a0:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <millis+0x1>
  a4:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <millis+0x2>
  a8:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <millis+0x3>
}
  ac:	bf 91       	pop	r27
  ae:	af 91       	pop	r26
  b0:	9f 91       	pop	r25
  b2:	8f 91       	pop	r24
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <high_pulse>:
 *@brief : helper function to generate high pulse 
 *@param : None
 *@retval : None
************************************************************************/
void high_pulse(void){
	TCNT0 = 0;
  be:	12 be       	out	0x32, r1	; 50
	OCR0A=104; //CTC Compare value
  c0:	88 e6       	ldi	r24, 0x68	; 104
  c2:	89 bd       	out	0x29, r24	; 41
  c4:	08 95       	ret

000000c6 <low_pulse>:
 *@brief : helper function to generate low pulse 
 *@param : None
 *@retval : None
************************************************************************/
void low_pulse(void){
	TCNT0 = 0;
  c6:	12 be       	out	0x32, r1	; 50
	OCR0A=0; //CTC Compare value
  c8:	19 bc       	out	0x29, r1	; 41
  ca:	08 95       	ret

000000cc <send_one>:
 *@brief : helper function to send one in IR data
 *@param : None
 *@retval : None
************************************************************************/
void send_one(void){
	high_pulse();     //mark
  cc:	f8 df       	rcall	.-16     	; 0xbe <high_pulse>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	8f e5       	ldi	r24, 0x5F	; 95
  d0:	94 e0       	ldi	r25, 0x04	; 4
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <send_one+0x6>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <send_one+0xc>
  d8:	00 00       	nop
	_delay_us(560);
	low_pulse();    //space
  da:	f5 df       	rcall	.-22     	; 0xc6 <low_pulse>
  dc:	8f e1       	ldi	r24, 0x1F	; 31
  de:	9d e0       	ldi	r25, 0x0D	; 13
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <send_one+0x14>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <send_one+0x1a>
  e6:	00 00       	nop
  e8:	08 95       	ret

000000ea <send_zero>:
 *@brief : helper function to send zero in IR data
 *@param : None
 *@retval : None
************************************************************************/
void send_zero(void){
	high_pulse();     //mark
  ea:	e9 df       	rcall	.-46     	; 0xbe <high_pulse>
  ec:	8f e5       	ldi	r24, 0x5F	; 95
  ee:	94 e0       	ldi	r25, 0x04	; 4
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <send_zero+0x6>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <send_zero+0xc>
  f6:	00 00       	nop
	_delay_us(560);
	low_pulse();    //space
  f8:	e6 df       	rcall	.-52     	; 0xc6 <low_pulse>
  fa:	8f e5       	ldi	r24, 0x5F	; 95
  fc:	94 e0       	ldi	r25, 0x04	; 4
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <send_zero+0x14>
 102:	00 c0       	rjmp	.+0      	; 0x104 <send_zero+0x1a>
 104:	00 00       	nop
 106:	08 95       	ret

00000108 <send_irdata>:
/***********************************************************************
 *@brief : function to send final prepared data using helper functions 
 *@param : prepared data as per protocol for device, size of data
 *@retval : None
************************************************************************/
void send_irdata(uint64_t data,int data_count){
 108:	6f 92       	push	r6
 10a:	7f 92       	push	r7
 10c:	8f 92       	push	r8
 10e:	9f 92       	push	r9
 110:	af 92       	push	r10
 112:	bf 92       	push	r11
 114:	cf 92       	push	r12
 116:	df 92       	push	r13
 118:	ef 92       	push	r14
 11a:	ff 92       	push	r15
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	c2 2f       	mov	r28, r18
 126:	83 2e       	mov	r8, r19
 128:	94 2e       	mov	r9, r20
 12a:	e5 2e       	mov	r14, r21
 12c:	f6 2e       	mov	r15, r22
 12e:	d7 2f       	mov	r29, r23
 130:	68 2e       	mov	r6, r24
 132:	79 2e       	mov	r7, r25
 134:	68 01       	movw	r12, r16
	for(int i=0;i<data_count;i++){
 136:	a1 2c       	mov	r10, r1
 138:	b1 2c       	mov	r11, r1
 13a:	24 c0       	rjmp	.+72     	; 0x184 <send_irdata+0x7c>
		if(data&0x01){
 13c:	2c 2f       	mov	r18, r28
 13e:	21 70       	andi	r18, 0x01	; 1
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	40 e0       	ldi	r20, 0x00	; 0
 144:	50 e0       	ldi	r21, 0x00	; 0
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	a0 e0       	ldi	r26, 0x00	; 0
 150:	f3 d4       	rcall	.+2534   	; 0xb38 <__cmpdi2_s8>
 152:	11 f0       	breq	.+4      	; 0x158 <send_irdata+0x50>
			send_one();
 154:	bb df       	rcall	.-138    	; 0xcc <send_one>
 156:	01 c0       	rjmp	.+2      	; 0x15a <send_irdata+0x52>
		}else{
			send_zero();
 158:	c8 df       	rcall	.-112    	; 0xea <send_zero>
		}
		
		data = data>>1;
 15a:	2c 2f       	mov	r18, r28
 15c:	38 2d       	mov	r19, r8
 15e:	49 2d       	mov	r20, r9
 160:	5e 2d       	mov	r21, r14
 162:	6f 2d       	mov	r22, r15
 164:	7d 2f       	mov	r23, r29
 166:	86 2d       	mov	r24, r6
 168:	97 2d       	mov	r25, r7
 16a:	01 e0       	ldi	r16, 0x01	; 1
 16c:	c9 d4       	rcall	.+2450   	; 0xb00 <__lshrdi3>
 16e:	c2 2f       	mov	r28, r18
 170:	83 2e       	mov	r8, r19
 172:	94 2e       	mov	r9, r20
 174:	e5 2e       	mov	r14, r21
 176:	f6 2e       	mov	r15, r22
 178:	d7 2f       	mov	r29, r23
 17a:	68 2e       	mov	r6, r24
 17c:	79 2e       	mov	r7, r25
 *@brief : function to send final prepared data using helper functions 
 *@param : prepared data as per protocol for device, size of data
 *@retval : None
************************************************************************/
void send_irdata(uint64_t data,int data_count){
	for(int i=0;i<data_count;i++){
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	a8 1a       	sub	r10, r24
 182:	b8 0a       	sbc	r11, r24
 184:	ac 14       	cp	r10, r12
 186:	bd 04       	cpc	r11, r13
 188:	cc f2       	brlt	.-78     	; 0x13c <send_irdata+0x34>
			send_zero();
		}
		
		data = data>>1;
	}
}
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	1f 91       	pop	r17
 190:	0f 91       	pop	r16
 192:	ff 90       	pop	r15
 194:	ef 90       	pop	r14
 196:	df 90       	pop	r13
 198:	cf 90       	pop	r12
 19a:	bf 90       	pop	r11
 19c:	af 90       	pop	r10
 19e:	9f 90       	pop	r9
 1a0:	8f 90       	pop	r8
 1a2:	7f 90       	pop	r7
 1a4:	6f 90       	pop	r6
 1a6:	08 95       	ret

000001a8 <ir_start>:
 *@param : None
 *@retval : None
************************************************************************/
void ir_start(void){
	//start
	high_pulse();     //mark
 1a8:	8a df       	rcall	.-236    	; 0xbe <high_pulse>
 1aa:	8f e3       	ldi	r24, 0x3F	; 63
 1ac:	96 e4       	ldi	r25, 0x46	; 70
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <ir_start+0x6>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <ir_start+0xc>
 1b4:	00 00       	nop
	_delay_us(8992);
	low_pulse();    //space
 1b6:	87 df       	rcall	.-242    	; 0xc6 <low_pulse>
 1b8:	8f e1       	ldi	r24, 0x1F	; 31
 1ba:	93 e2       	ldi	r25, 0x23	; 35
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <ir_start+0x14>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <ir_start+0x1a>
 1c2:	00 00       	nop
 1c4:	08 95       	ret

000001c6 <ir_sequence_AC>:
 *@param : first set of data, second set of data, size of first set of data,
  size of second set of data
 *@retval : None
 *@note : prepares the final data to be sent as per AC IR protocol 
************************************************************************/
void ir_sequence_AC(uint64_t dataA, uint64_t dataB, int data_countA, int data_countB){    
 1c6:	2f 92       	push	r2
 1c8:	3f 92       	push	r3
 1ca:	4f 92       	push	r4
 1cc:	5f 92       	push	r5
 1ce:	6f 92       	push	r6
 1d0:	7f 92       	push	r7
 1d2:	8f 92       	push	r8
 1d4:	9f 92       	push	r9
 1d6:	af 92       	push	r10
 1d8:	bf 92       	push	r11
 1da:	cf 92       	push	r12
 1dc:	df 92       	push	r13
 1de:	ef 92       	push	r14
 1e0:	ff 92       	push	r15
 1e2:	0f 93       	push	r16
 1e4:	1f 93       	push	r17
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	00 d0       	rcall	.+0      	; 0x1ec <ir_sequence_AC+0x26>
 1ec:	00 d0       	rcall	.+0      	; 0x1ee <ir_sequence_AC+0x28>
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
 1f2:	22 2e       	mov	r2, r18
 1f4:	33 2e       	mov	r3, r19
 1f6:	44 2e       	mov	r4, r20
 1f8:	55 2e       	mov	r5, r21
 1fa:	66 2e       	mov	r6, r22
 1fc:	77 2e       	mov	r7, r23
 1fe:	89 83       	std	Y+1, r24	; 0x01
 200:	9a 83       	std	Y+2, r25	; 0x02
 202:	0b 83       	std	Y+3, r16	; 0x03
 204:	1c 83       	std	Y+4, r17	; 0x04
 206:	84 01       	movw	r16, r8
	DDRB |= (1<<DDB0);        //Enable PB0 as output
 208:	87 b3       	in	r24, 0x17	; 23
 20a:	81 60       	ori	r24, 0x01	; 1
 20c:	87 bb       	out	0x17, r24	; 23
	
	ir_start();
 20e:	cc df       	rcall	.-104    	; 0x1a8 <ir_start>
	//Data - LSB first
	send_irdata(dataA,data_countA);
 210:	22 2d       	mov	r18, r2
 212:	33 2d       	mov	r19, r3
 214:	44 2d       	mov	r20, r4
 216:	55 2d       	mov	r21, r5
 218:	66 2d       	mov	r22, r6
 21a:	77 2d       	mov	r23, r7
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	9a 81       	ldd	r25, Y+2	; 0x02
 220:	73 df       	rcall	.-282    	; 0x108 <send_irdata>
	//end
	high_pulse();     //mark
 222:	4d df       	rcall	.-358    	; 0xbe <high_pulse>
 224:	8f e5       	ldi	r24, 0x5F	; 95
 226:	94 e0       	ldi	r25, 0x04	; 4
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <__DATA_REGION_LENGTH__+0x28>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <__DATA_REGION_LENGTH__+0x2e>
 22e:	00 00       	nop
	_delay_us(560);
	//repeat
	low_pulse();     //space
 230:	4a df       	rcall	.-364    	; 0xc6 <low_pulse>
 232:	8b e5       	ldi	r24, 0x5B	; 91
 234:	91 ea       	ldi	r25, 0xA1	; 161
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <__DATA_REGION_LENGTH__+0x36>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <__DATA_REGION_LENGTH__+0x3c>
 23c:	00 00       	nop
	_delay_us(20654);
	high_pulse();     //mark
 23e:	3f df       	rcall	.-386    	; 0xbe <high_pulse>
 240:	8f e5       	ldi	r24, 0x5F	; 95
 242:	94 e0       	ldi	r25, 0x04	; 4
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <__DATA_REGION_LENGTH__+0x44>
 248:	00 c0       	rjmp	.+0      	; 0x24a <__DATA_REGION_LENGTH__+0x4a>
 24a:	00 00       	nop
	_delay_us(560);
	low_pulse();     //space
 24c:	3c df       	rcall	.-392    	; 0xc6 <low_pulse>
 24e:	8f e1       	ldi	r24, 0x1F	; 31
 250:	9d e0       	ldi	r25, 0x0D	; 13
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <__DATA_REGION_LENGTH__+0x52>
 256:	00 c0       	rjmp	.+0      	; 0x258 <__DATA_REGION_LENGTH__+0x58>
 258:	00 00       	nop
	_delay_us(1680);
	//Data - LSB first
	send_irdata(dataB,data_countB);
 25a:	09 8d       	ldd	r16, Y+25	; 0x19
 25c:	1a 8d       	ldd	r17, Y+26	; 0x1a
 25e:	2a 2d       	mov	r18, r10
 260:	3b 2d       	mov	r19, r11
 262:	4c 2d       	mov	r20, r12
 264:	5d 2d       	mov	r21, r13
 266:	6e 2d       	mov	r22, r14
 268:	7f 2d       	mov	r23, r15
 26a:	8b 81       	ldd	r24, Y+3	; 0x03
 26c:	9c 81       	ldd	r25, Y+4	; 0x04
 26e:	4c df       	rcall	.-360    	; 0x108 <send_irdata>
	//end
	high_pulse();     //mark
 270:	26 df       	rcall	.-436    	; 0xbe <high_pulse>
 272:	8f e5       	ldi	r24, 0x5F	; 95
 274:	94 e0       	ldi	r25, 0x04	; 4
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <__stack+0x17>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <__stack+0x1d>
 27c:	00 00       	nop
	_delay_us(560);
	//repeat
	low_pulse();     //space
 27e:	23 df       	rcall	.-442    	; 0xc6 <low_pulse>
	
	DDRB &= ~(1<<DDB0);        //Disable PB0 as output
 280:	87 b3       	in	r24, 0x17	; 23
 282:	8e 7f       	andi	r24, 0xFE	; 254
 284:	87 bb       	out	0x17, r24	; 23

}
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	0f 90       	pop	r0
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	1f 91       	pop	r17
 294:	0f 91       	pop	r16
 296:	ff 90       	pop	r15
 298:	ef 90       	pop	r14
 29a:	df 90       	pop	r13
 29c:	cf 90       	pop	r12
 29e:	bf 90       	pop	r11
 2a0:	af 90       	pop	r10
 2a2:	9f 90       	pop	r9
 2a4:	8f 90       	pop	r8
 2a6:	7f 90       	pop	r7
 2a8:	6f 90       	pop	r6
 2aa:	5f 90       	pop	r5
 2ac:	4f 90       	pop	r4
 2ae:	3f 90       	pop	r3
 2b0:	2f 90       	pop	r2
 2b2:	08 95       	ret

000002b4 <ir_sequence_TV>:
 *@param : device address, command to be sent, size of address, size of 
  command
 *@retval : None
 *@note : prepares the final data to be sent as per TV IR protocol
************************************************************************/
void ir_sequence_TV(uint16_t address, uint16_t command, uint16_t address_count, uint16_t command_count){    
 2b4:	6f 92       	push	r6
 2b6:	7f 92       	push	r7
 2b8:	8f 92       	push	r8
 2ba:	9f 92       	push	r9
 2bc:	af 92       	push	r10
 2be:	bf 92       	push	r11
 2c0:	cf 92       	push	r12
 2c2:	df 92       	push	r13
 2c4:	ef 92       	push	r14
 2c6:	ff 92       	push	r15
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	7c 01       	movw	r14, r24
 2d2:	4b 01       	movw	r8, r22
 2d4:	8a 01       	movw	r16, r20
 2d6:	39 01       	movw	r6, r18
	DDRB |= (1<<DDB0);        //Enable PB0 as output
 2d8:	87 b3       	in	r24, 0x17	; 23
 2da:	81 60       	ori	r24, 0x01	; 1
 2dc:	87 bb       	out	0x17, r24	; 23
	
	//start
	ir_start();
 2de:	64 df       	rcall	.-312    	; 0x1a8 <ir_start>
	//Address 
	send_irdata(address,address_count);
 2e0:	c7 01       	movw	r24, r14
 2e2:	2e 2d       	mov	r18, r14
 2e4:	39 2f       	mov	r19, r25
 2e6:	40 e0       	ldi	r20, 0x00	; 0
 2e8:	50 e0       	ldi	r21, 0x00	; 0
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0a df       	rcall	.-492    	; 0x108 <send_irdata>
	//command 
	send_irdata(command,command_count);
 2f4:	83 01       	movw	r16, r6
 2f6:	28 2d       	mov	r18, r8
 2f8:	39 2d       	mov	r19, r9
 2fa:	40 e0       	ldi	r20, 0x00	; 0
 2fc:	50 e0       	ldi	r21, 0x00	; 0
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	00 df       	rcall	.-512    	; 0x108 <send_irdata>
	//end
	high_pulse();     //mark
 308:	da de       	rcall	.-588    	; 0xbe <high_pulse>
 30a:	8f e5       	ldi	r24, 0x5F	; 95
 30c:	94 e0       	ldi	r25, 0x04	; 4
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <ir_sequence_TV+0x5a>
 312:	00 c0       	rjmp	.+0      	; 0x314 <ir_sequence_TV+0x60>
 314:	00 00       	nop
	_delay_us(560);
	//repeat
	low_pulse();     //space
 316:	d7 de       	rcall	.-594    	; 0xc6 <low_pulse>
 318:	97 ee       	ldi	r25, 0xE7	; 231
 31a:	22 e0       	ldi	r18, 0x02	; 2
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	91 50       	subi	r25, 0x01	; 1
 320:	20 40       	sbci	r18, 0x00	; 0
 322:	80 40       	sbci	r24, 0x00	; 0
 324:	e1 f7       	brne	.-8      	; 0x31e <ir_sequence_TV+0x6a>
 326:	00 c0       	rjmp	.+0      	; 0x328 <ir_sequence_TV+0x74>
 328:	00 00       	nop
	_delay_us(41425);
	high_pulse();     //mark
 32a:	c9 de       	rcall	.-622    	; 0xbe <high_pulse>
 32c:	8f e3       	ldi	r24, 0x3F	; 63
 32e:	96 e4       	ldi	r25, 0x46	; 70
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <ir_sequence_TV+0x7c>
 334:	00 c0       	rjmp	.+0      	; 0x336 <ir_sequence_TV+0x82>
 336:	00 00       	nop
	_delay_us(8992);
	low_pulse();     //space
 338:	c6 de       	rcall	.-628    	; 0xc6 <low_pulse>
 33a:	83 e9       	ldi	r24, 0x93	; 147
 33c:	91 e1       	ldi	r25, 0x11	; 17
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <ir_sequence_TV+0x8a>
 342:	00 c0       	rjmp	.+0      	; 0x344 <ir_sequence_TV+0x90>
 344:	00 00       	nop
	_delay_us(2250);
	high_pulse();     //mark
 346:	bb de       	rcall	.-650    	; 0xbe <high_pulse>
 348:	8f e5       	ldi	r24, 0x5F	; 95
 34a:	94 e0       	ldi	r25, 0x04	; 4
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <ir_sequence_TV+0x98>
 350:	00 c0       	rjmp	.+0      	; 0x352 <ir_sequence_TV+0x9e>
 352:	00 00       	nop
	_delay_us(560);
	//repeat again
	low_pulse();     //space
 354:	b8 de       	rcall	.-656    	; 0xc6 <low_pulse>
 356:	94 ed       	ldi	r25, 0xD4	; 212
 358:	29 e5       	ldi	r18, 0x59	; 89
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	91 50       	subi	r25, 0x01	; 1
 35e:	20 40       	sbci	r18, 0x00	; 0
 360:	80 40       	sbci	r24, 0x00	; 0
 362:	e1 f7       	brne	.-8      	; 0x35c <ir_sequence_TV+0xa8>
 364:	00 c0       	rjmp	.+0      	; 0x366 <ir_sequence_TV+0xb2>
	_delay_us(96293);
	high_pulse();     //mark
 366:	ab de       	rcall	.-682    	; 0xbe <high_pulse>
 368:	8f e3       	ldi	r24, 0x3F	; 63
 36a:	96 e4       	ldi	r25, 0x46	; 70
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <ir_sequence_TV+0xb8>
 370:	00 c0       	rjmp	.+0      	; 0x372 <ir_sequence_TV+0xbe>
 372:	00 00       	nop
	_delay_us(8992);
	low_pulse();     //space
 374:	a8 de       	rcall	.-688    	; 0xc6 <low_pulse>
 376:	83 e9       	ldi	r24, 0x93	; 147
 378:	91 e1       	ldi	r25, 0x11	; 17
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <ir_sequence_TV+0xc6>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <ir_sequence_TV+0xcc>
 380:	00 00       	nop
	_delay_us(2250);
	high_pulse();     //mark
 382:	9d de       	rcall	.-710    	; 0xbe <high_pulse>
 384:	83 e6       	ldi	r24, 0x63	; 99
 386:	94 e0       	ldi	r25, 0x04	; 4
 388:	01 97       	sbiw	r24, 0x01	; 1
 38a:	f1 f7       	brne	.-4      	; 0x388 <ir_sequence_TV+0xd4>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <ir_sequence_TV+0xda>
 38e:	00 00       	nop
	_delay_us(562);
	low_pulse();     //space
 390:	9a de       	rcall	.-716    	; 0xc6 <low_pulse>
	
	DDRB &= ~(1<<DDB0);        //Disable PB0 as output
 392:	87 b3       	in	r24, 0x17	; 23
 394:	8e 7f       	andi	r24, 0xFE	; 254
 396:	87 bb       	out	0x17, r24	; 23
	
}
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	1f 91       	pop	r17
 39e:	0f 91       	pop	r16
 3a0:	ff 90       	pop	r15
 3a2:	ef 90       	pop	r14
 3a4:	df 90       	pop	r13
 3a6:	cf 90       	pop	r12
 3a8:	bf 90       	pop	r11
 3aa:	af 90       	pop	r10
 3ac:	9f 90       	pop	r9
 3ae:	8f 90       	pop	r8
 3b0:	7f 90       	pop	r7
 3b2:	6f 90       	pop	r6
 3b4:	08 95       	ret

000003b6 <ir_sequence_ACtemp>:
 *@brief : function to control air conditioner temperature
 *@param : temperature to be set
 *@retval : None
 *@note : sends command for the specific temperature
************************************************************************/
void ir_sequence_ACtemp(uint8_t temperature){
 3b6:	8f 92       	push	r8
 3b8:	9f 92       	push	r9
 3ba:	af 92       	push	r10
 3bc:	bf 92       	push	r11
 3be:	cf 92       	push	r12
 3c0:	df 92       	push	r13
 3c2:	ef 92       	push	r14
 3c4:	ff 92       	push	r15
 3c6:	0f 93       	push	r16
 3c8:	1f 93       	push	r17
	switch(temperature){
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	fc 01       	movw	r30, r24
 3ce:	70 97       	sbiw	r30, 0x10	; 16
 3d0:	ef 30       	cpi	r30, 0x0F	; 15
 3d2:	f1 05       	cpc	r31, r1
 3d4:	08 f0       	brcs	.+2      	; 0x3d8 <ir_sequence_ACtemp+0x22>
 3d6:	0b c2       	rjmp	.+1046   	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
 3d8:	e1 5f       	subi	r30, 0xF1	; 241
 3da:	ff 4f       	sbci	r31, 0xFF	; 255
 3dc:	09 94       	ijmp
		case 16:{
			       //Data - 0x250200079 LSB first, 0x30001008  LSB first
			       ir_sequence_AC(0x250200079,0x30001008,35,31);  
 3de:	1f 92       	push	r1
 3e0:	8f e1       	ldi	r24, 0x1F	; 31
 3e2:	8f 93       	push	r24
 3e4:	0f 2e       	mov	r0, r31
 3e6:	f3 e2       	ldi	r31, 0x23	; 35
 3e8:	8f 2e       	mov	r8, r31
 3ea:	91 2c       	mov	r9, r1
 3ec:	f0 2d       	mov	r31, r0
 3ee:	68 94       	set
 3f0:	aa 24       	eor	r10, r10
 3f2:	a3 f8       	bld	r10, 3
 3f4:	68 94       	set
 3f6:	bb 24       	eor	r11, r11
 3f8:	b4 f8       	bld	r11, 4
 3fa:	c1 2c       	mov	r12, r1
 3fc:	0f 2e       	mov	r0, r31
 3fe:	f0 e3       	ldi	r31, 0x30	; 48
 400:	df 2e       	mov	r13, r31
 402:	f0 2d       	mov	r31, r0
 404:	e1 2c       	mov	r14, r1
 406:	f1 2c       	mov	r15, r1
 408:	00 e0       	ldi	r16, 0x00	; 0
 40a:	10 e0       	ldi	r17, 0x00	; 0
 40c:	29 e7       	ldi	r18, 0x79	; 121
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	40 e2       	ldi	r20, 0x20	; 32
 412:	50 e5       	ldi	r21, 0x50	; 80
 414:	62 e0       	ldi	r22, 0x02	; 2
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	d4 de       	rcall	.-600    	; 0x1c6 <ir_sequence_AC>
		        }break;
 41e:	0f 90       	pop	r0
 420:	0f 90       	pop	r0
 422:	e5 c1       	rjmp	.+970    	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
		case 17:{
			       //Data - 0x250200179 LSB first, 0x38001008  LSB first
			       ir_sequence_AC(0x250200179,0x38001008,35,31);
 424:	1f 92       	push	r1
 426:	8f e1       	ldi	r24, 0x1F	; 31
 428:	8f 93       	push	r24
 42a:	0f 2e       	mov	r0, r31
 42c:	f3 e2       	ldi	r31, 0x23	; 35
 42e:	8f 2e       	mov	r8, r31
 430:	91 2c       	mov	r9, r1
 432:	f0 2d       	mov	r31, r0
 434:	68 94       	set
 436:	aa 24       	eor	r10, r10
 438:	a3 f8       	bld	r10, 3
 43a:	68 94       	set
 43c:	bb 24       	eor	r11, r11
 43e:	b4 f8       	bld	r11, 4
 440:	c1 2c       	mov	r12, r1
 442:	0f 2e       	mov	r0, r31
 444:	f8 e3       	ldi	r31, 0x38	; 56
 446:	df 2e       	mov	r13, r31
 448:	f0 2d       	mov	r31, r0
 44a:	e1 2c       	mov	r14, r1
 44c:	f1 2c       	mov	r15, r1
 44e:	00 e0       	ldi	r16, 0x00	; 0
 450:	10 e0       	ldi	r17, 0x00	; 0
 452:	29 e7       	ldi	r18, 0x79	; 121
 454:	31 e0       	ldi	r19, 0x01	; 1
 456:	40 e2       	ldi	r20, 0x20	; 32
 458:	50 e5       	ldi	r21, 0x50	; 80
 45a:	62 e0       	ldi	r22, 0x02	; 2
 45c:	70 e0       	ldi	r23, 0x00	; 0
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	b1 de       	rcall	.-670    	; 0x1c6 <ir_sequence_AC>
		        }break;
 464:	0f 90       	pop	r0
 466:	0f 90       	pop	r0
 468:	c2 c1       	rjmp	.+900    	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
	    case 18:{
			       //Data - 0x250200279 LSB first, 0x40001008  LSB first
			       ir_sequence_AC(0x250200279,0x40001008,35,31);
 46a:	1f 92       	push	r1
 46c:	8f e1       	ldi	r24, 0x1F	; 31
 46e:	8f 93       	push	r24
 470:	0f 2e       	mov	r0, r31
 472:	f3 e2       	ldi	r31, 0x23	; 35
 474:	8f 2e       	mov	r8, r31
 476:	91 2c       	mov	r9, r1
 478:	f0 2d       	mov	r31, r0
 47a:	68 94       	set
 47c:	aa 24       	eor	r10, r10
 47e:	a3 f8       	bld	r10, 3
 480:	68 94       	set
 482:	bb 24       	eor	r11, r11
 484:	b4 f8       	bld	r11, 4
 486:	c1 2c       	mov	r12, r1
 488:	68 94       	set
 48a:	dd 24       	eor	r13, r13
 48c:	d6 f8       	bld	r13, 6
 48e:	e1 2c       	mov	r14, r1
 490:	f1 2c       	mov	r15, r1
 492:	00 e0       	ldi	r16, 0x00	; 0
 494:	10 e0       	ldi	r17, 0x00	; 0
 496:	29 e7       	ldi	r18, 0x79	; 121
 498:	32 e0       	ldi	r19, 0x02	; 2
 49a:	40 e2       	ldi	r20, 0x20	; 32
 49c:	50 e5       	ldi	r21, 0x50	; 80
 49e:	62 e0       	ldi	r22, 0x02	; 2
 4a0:	70 e0       	ldi	r23, 0x00	; 0
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	8f de       	rcall	.-738    	; 0x1c6 <ir_sequence_AC>
		        }break;
 4a8:	0f 90       	pop	r0
 4aa:	0f 90       	pop	r0
 4ac:	a0 c1       	rjmp	.+832    	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
		case 19:{
			       //Data - 0x250200379 LSB first, 0x48001008  LSB first
			       ir_sequence_AC(0x250200379,0x48001008,35,31);
 4ae:	1f 92       	push	r1
 4b0:	8f e1       	ldi	r24, 0x1F	; 31
 4b2:	8f 93       	push	r24
 4b4:	0f 2e       	mov	r0, r31
 4b6:	f3 e2       	ldi	r31, 0x23	; 35
 4b8:	8f 2e       	mov	r8, r31
 4ba:	91 2c       	mov	r9, r1
 4bc:	f0 2d       	mov	r31, r0
 4be:	68 94       	set
 4c0:	aa 24       	eor	r10, r10
 4c2:	a3 f8       	bld	r10, 3
 4c4:	68 94       	set
 4c6:	bb 24       	eor	r11, r11
 4c8:	b4 f8       	bld	r11, 4
 4ca:	c1 2c       	mov	r12, r1
 4cc:	0f 2e       	mov	r0, r31
 4ce:	f8 e4       	ldi	r31, 0x48	; 72
 4d0:	df 2e       	mov	r13, r31
 4d2:	f0 2d       	mov	r31, r0
 4d4:	e1 2c       	mov	r14, r1
 4d6:	f1 2c       	mov	r15, r1
 4d8:	00 e0       	ldi	r16, 0x00	; 0
 4da:	10 e0       	ldi	r17, 0x00	; 0
 4dc:	29 e7       	ldi	r18, 0x79	; 121
 4de:	33 e0       	ldi	r19, 0x03	; 3
 4e0:	40 e2       	ldi	r20, 0x20	; 32
 4e2:	50 e5       	ldi	r21, 0x50	; 80
 4e4:	62 e0       	ldi	r22, 0x02	; 2
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	6c de       	rcall	.-808    	; 0x1c6 <ir_sequence_AC>
		        }break;
 4ee:	0f 90       	pop	r0
 4f0:	0f 90       	pop	r0
 4f2:	7d c1       	rjmp	.+762    	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
	    case 20:{
			       //Data - 0x250200479 LSB first, 0x50001008  LSB first
			       ir_sequence_AC(0x250200479,0x50001008,35,31);
 4f4:	1f 92       	push	r1
 4f6:	8f e1       	ldi	r24, 0x1F	; 31
 4f8:	8f 93       	push	r24
 4fa:	0f 2e       	mov	r0, r31
 4fc:	f3 e2       	ldi	r31, 0x23	; 35
 4fe:	8f 2e       	mov	r8, r31
 500:	91 2c       	mov	r9, r1
 502:	f0 2d       	mov	r31, r0
 504:	68 94       	set
 506:	aa 24       	eor	r10, r10
 508:	a3 f8       	bld	r10, 3
 50a:	68 94       	set
 50c:	bb 24       	eor	r11, r11
 50e:	b4 f8       	bld	r11, 4
 510:	c1 2c       	mov	r12, r1
 512:	0f 2e       	mov	r0, r31
 514:	f0 e5       	ldi	r31, 0x50	; 80
 516:	df 2e       	mov	r13, r31
 518:	f0 2d       	mov	r31, r0
 51a:	e1 2c       	mov	r14, r1
 51c:	f1 2c       	mov	r15, r1
 51e:	00 e0       	ldi	r16, 0x00	; 0
 520:	10 e0       	ldi	r17, 0x00	; 0
 522:	29 e7       	ldi	r18, 0x79	; 121
 524:	34 e0       	ldi	r19, 0x04	; 4
 526:	40 e2       	ldi	r20, 0x20	; 32
 528:	50 e5       	ldi	r21, 0x50	; 80
 52a:	62 e0       	ldi	r22, 0x02	; 2
 52c:	70 e0       	ldi	r23, 0x00	; 0
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	49 de       	rcall	.-878    	; 0x1c6 <ir_sequence_AC>
		        }break;
 534:	0f 90       	pop	r0
 536:	0f 90       	pop	r0
 538:	5a c1       	rjmp	.+692    	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
		case 21:{
			       //Data - 0x250200579 LSB first, 0x58001008  LSB first
			       ir_sequence_AC(0x250200579,0x58001008,35,31);
 53a:	1f 92       	push	r1
 53c:	8f e1       	ldi	r24, 0x1F	; 31
 53e:	8f 93       	push	r24
 540:	0f 2e       	mov	r0, r31
 542:	f3 e2       	ldi	r31, 0x23	; 35
 544:	8f 2e       	mov	r8, r31
 546:	91 2c       	mov	r9, r1
 548:	f0 2d       	mov	r31, r0
 54a:	68 94       	set
 54c:	aa 24       	eor	r10, r10
 54e:	a3 f8       	bld	r10, 3
 550:	68 94       	set
 552:	bb 24       	eor	r11, r11
 554:	b4 f8       	bld	r11, 4
 556:	c1 2c       	mov	r12, r1
 558:	0f 2e       	mov	r0, r31
 55a:	f8 e5       	ldi	r31, 0x58	; 88
 55c:	df 2e       	mov	r13, r31
 55e:	f0 2d       	mov	r31, r0
 560:	e1 2c       	mov	r14, r1
 562:	f1 2c       	mov	r15, r1
 564:	00 e0       	ldi	r16, 0x00	; 0
 566:	10 e0       	ldi	r17, 0x00	; 0
 568:	29 e7       	ldi	r18, 0x79	; 121
 56a:	35 e0       	ldi	r19, 0x05	; 5
 56c:	40 e2       	ldi	r20, 0x20	; 32
 56e:	50 e5       	ldi	r21, 0x50	; 80
 570:	62 e0       	ldi	r22, 0x02	; 2
 572:	70 e0       	ldi	r23, 0x00	; 0
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	26 de       	rcall	.-948    	; 0x1c6 <ir_sequence_AC>
		        }break;
 57a:	0f 90       	pop	r0
 57c:	0f 90       	pop	r0
 57e:	37 c1       	rjmp	.+622    	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
		case 22:{
			       //Data - 0x250200679 LSB first, 0x60001008  LSB first
			       ir_sequence_AC(0x250200679,0x60001008,35,31);
 580:	1f 92       	push	r1
 582:	8f e1       	ldi	r24, 0x1F	; 31
 584:	8f 93       	push	r24
 586:	0f 2e       	mov	r0, r31
 588:	f3 e2       	ldi	r31, 0x23	; 35
 58a:	8f 2e       	mov	r8, r31
 58c:	91 2c       	mov	r9, r1
 58e:	f0 2d       	mov	r31, r0
 590:	68 94       	set
 592:	aa 24       	eor	r10, r10
 594:	a3 f8       	bld	r10, 3
 596:	68 94       	set
 598:	bb 24       	eor	r11, r11
 59a:	b4 f8       	bld	r11, 4
 59c:	c1 2c       	mov	r12, r1
 59e:	0f 2e       	mov	r0, r31
 5a0:	f0 e6       	ldi	r31, 0x60	; 96
 5a2:	df 2e       	mov	r13, r31
 5a4:	f0 2d       	mov	r31, r0
 5a6:	e1 2c       	mov	r14, r1
 5a8:	f1 2c       	mov	r15, r1
 5aa:	00 e0       	ldi	r16, 0x00	; 0
 5ac:	10 e0       	ldi	r17, 0x00	; 0
 5ae:	29 e7       	ldi	r18, 0x79	; 121
 5b0:	36 e0       	ldi	r19, 0x06	; 6
 5b2:	40 e2       	ldi	r20, 0x20	; 32
 5b4:	50 e5       	ldi	r21, 0x50	; 80
 5b6:	62 e0       	ldi	r22, 0x02	; 2
 5b8:	70 e0       	ldi	r23, 0x00	; 0
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	03 de       	rcall	.-1018   	; 0x1c6 <ir_sequence_AC>
		        }break;
 5c0:	0f 90       	pop	r0
 5c2:	0f 90       	pop	r0
 5c4:	14 c1       	rjmp	.+552    	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
		case 23:{
			       //Data - 0x250200779 LSB first, 0x68001008  LSB first
			       ir_sequence_AC(0x250200779,0x68001008,35,31);
 5c6:	1f 92       	push	r1
 5c8:	8f e1       	ldi	r24, 0x1F	; 31
 5ca:	8f 93       	push	r24
 5cc:	0f 2e       	mov	r0, r31
 5ce:	f3 e2       	ldi	r31, 0x23	; 35
 5d0:	8f 2e       	mov	r8, r31
 5d2:	91 2c       	mov	r9, r1
 5d4:	f0 2d       	mov	r31, r0
 5d6:	68 94       	set
 5d8:	aa 24       	eor	r10, r10
 5da:	a3 f8       	bld	r10, 3
 5dc:	68 94       	set
 5de:	bb 24       	eor	r11, r11
 5e0:	b4 f8       	bld	r11, 4
 5e2:	c1 2c       	mov	r12, r1
 5e4:	0f 2e       	mov	r0, r31
 5e6:	f8 e6       	ldi	r31, 0x68	; 104
 5e8:	df 2e       	mov	r13, r31
 5ea:	f0 2d       	mov	r31, r0
 5ec:	e1 2c       	mov	r14, r1
 5ee:	f1 2c       	mov	r15, r1
 5f0:	00 e0       	ldi	r16, 0x00	; 0
 5f2:	10 e0       	ldi	r17, 0x00	; 0
 5f4:	29 e7       	ldi	r18, 0x79	; 121
 5f6:	37 e0       	ldi	r19, 0x07	; 7
 5f8:	40 e2       	ldi	r20, 0x20	; 32
 5fa:	50 e5       	ldi	r21, 0x50	; 80
 5fc:	62 e0       	ldi	r22, 0x02	; 2
 5fe:	70 e0       	ldi	r23, 0x00	; 0
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	e0 dd       	rcall	.-1088   	; 0x1c6 <ir_sequence_AC>
		        }break;
 606:	0f 90       	pop	r0
 608:	0f 90       	pop	r0
 60a:	f1 c0       	rjmp	.+482    	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
		case 24:{
			       //Data - 0x250200879 LSB first, 0x70001008  LSB first
			       ir_sequence_AC(0x250200879,0x70001008,35,31);
 60c:	1f 92       	push	r1
 60e:	8f e1       	ldi	r24, 0x1F	; 31
 610:	8f 93       	push	r24
 612:	0f 2e       	mov	r0, r31
 614:	f3 e2       	ldi	r31, 0x23	; 35
 616:	8f 2e       	mov	r8, r31
 618:	91 2c       	mov	r9, r1
 61a:	f0 2d       	mov	r31, r0
 61c:	68 94       	set
 61e:	aa 24       	eor	r10, r10
 620:	a3 f8       	bld	r10, 3
 622:	68 94       	set
 624:	bb 24       	eor	r11, r11
 626:	b4 f8       	bld	r11, 4
 628:	c1 2c       	mov	r12, r1
 62a:	0f 2e       	mov	r0, r31
 62c:	f0 e7       	ldi	r31, 0x70	; 112
 62e:	df 2e       	mov	r13, r31
 630:	f0 2d       	mov	r31, r0
 632:	e1 2c       	mov	r14, r1
 634:	f1 2c       	mov	r15, r1
 636:	00 e0       	ldi	r16, 0x00	; 0
 638:	10 e0       	ldi	r17, 0x00	; 0
 63a:	29 e7       	ldi	r18, 0x79	; 121
 63c:	38 e0       	ldi	r19, 0x08	; 8
 63e:	40 e2       	ldi	r20, 0x20	; 32
 640:	50 e5       	ldi	r21, 0x50	; 80
 642:	62 e0       	ldi	r22, 0x02	; 2
 644:	70 e0       	ldi	r23, 0x00	; 0
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	bd dd       	rcall	.-1158   	; 0x1c6 <ir_sequence_AC>
		        }break;
 64c:	0f 90       	pop	r0
 64e:	0f 90       	pop	r0
 650:	ce c0       	rjmp	.+412    	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
		case 25:{
			       //Data - 0x250200979 LSB first, 0x78001008  LSB first
			       ir_sequence_AC(0x250200979,0x78001008,35,31);
 652:	1f 92       	push	r1
 654:	8f e1       	ldi	r24, 0x1F	; 31
 656:	8f 93       	push	r24
 658:	0f 2e       	mov	r0, r31
 65a:	f3 e2       	ldi	r31, 0x23	; 35
 65c:	8f 2e       	mov	r8, r31
 65e:	91 2c       	mov	r9, r1
 660:	f0 2d       	mov	r31, r0
 662:	68 94       	set
 664:	aa 24       	eor	r10, r10
 666:	a3 f8       	bld	r10, 3
 668:	68 94       	set
 66a:	bb 24       	eor	r11, r11
 66c:	b4 f8       	bld	r11, 4
 66e:	c1 2c       	mov	r12, r1
 670:	0f 2e       	mov	r0, r31
 672:	f8 e7       	ldi	r31, 0x78	; 120
 674:	df 2e       	mov	r13, r31
 676:	f0 2d       	mov	r31, r0
 678:	e1 2c       	mov	r14, r1
 67a:	f1 2c       	mov	r15, r1
 67c:	00 e0       	ldi	r16, 0x00	; 0
 67e:	10 e0       	ldi	r17, 0x00	; 0
 680:	29 e7       	ldi	r18, 0x79	; 121
 682:	39 e0       	ldi	r19, 0x09	; 9
 684:	40 e2       	ldi	r20, 0x20	; 32
 686:	50 e5       	ldi	r21, 0x50	; 80
 688:	62 e0       	ldi	r22, 0x02	; 2
 68a:	70 e0       	ldi	r23, 0x00	; 0
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	9a dd       	rcall	.-1228   	; 0x1c6 <ir_sequence_AC>
		        }break;
 692:	0f 90       	pop	r0
 694:	0f 90       	pop	r0
 696:	ab c0       	rjmp	.+342    	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
		case 26:{
			       //Data - 0x250200A79 LSB first, 0x60001008  LSB first
			       ir_sequence_AC(0x250200A79,0x60001008,35,31);
 698:	1f 92       	push	r1
 69a:	8f e1       	ldi	r24, 0x1F	; 31
 69c:	8f 93       	push	r24
 69e:	0f 2e       	mov	r0, r31
 6a0:	f3 e2       	ldi	r31, 0x23	; 35
 6a2:	8f 2e       	mov	r8, r31
 6a4:	91 2c       	mov	r9, r1
 6a6:	f0 2d       	mov	r31, r0
 6a8:	68 94       	set
 6aa:	aa 24       	eor	r10, r10
 6ac:	a3 f8       	bld	r10, 3
 6ae:	68 94       	set
 6b0:	bb 24       	eor	r11, r11
 6b2:	b4 f8       	bld	r11, 4
 6b4:	c1 2c       	mov	r12, r1
 6b6:	0f 2e       	mov	r0, r31
 6b8:	f0 e6       	ldi	r31, 0x60	; 96
 6ba:	df 2e       	mov	r13, r31
 6bc:	f0 2d       	mov	r31, r0
 6be:	e1 2c       	mov	r14, r1
 6c0:	f1 2c       	mov	r15, r1
 6c2:	00 e0       	ldi	r16, 0x00	; 0
 6c4:	10 e0       	ldi	r17, 0x00	; 0
 6c6:	29 e7       	ldi	r18, 0x79	; 121
 6c8:	3a e0       	ldi	r19, 0x0A	; 10
 6ca:	40 e2       	ldi	r20, 0x20	; 32
 6cc:	50 e5       	ldi	r21, 0x50	; 80
 6ce:	62 e0       	ldi	r22, 0x02	; 2
 6d0:	70 e0       	ldi	r23, 0x00	; 0
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	77 dd       	rcall	.-1298   	; 0x1c6 <ir_sequence_AC>
		        }break;
 6d8:	0f 90       	pop	r0
 6da:	0f 90       	pop	r0
 6dc:	88 c0       	rjmp	.+272    	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
		case 27:{
			       //Data - 0x250200B79 LSB first, 0x8001008  LSB first
			       ir_sequence_AC(0x250200B79,0x8001008,35,31);
 6de:	1f 92       	push	r1
 6e0:	8f e1       	ldi	r24, 0x1F	; 31
 6e2:	8f 93       	push	r24
 6e4:	0f 2e       	mov	r0, r31
 6e6:	f3 e2       	ldi	r31, 0x23	; 35
 6e8:	8f 2e       	mov	r8, r31
 6ea:	91 2c       	mov	r9, r1
 6ec:	f0 2d       	mov	r31, r0
 6ee:	68 94       	set
 6f0:	aa 24       	eor	r10, r10
 6f2:	a3 f8       	bld	r10, 3
 6f4:	68 94       	set
 6f6:	bb 24       	eor	r11, r11
 6f8:	b4 f8       	bld	r11, 4
 6fa:	c1 2c       	mov	r12, r1
 6fc:	68 94       	set
 6fe:	dd 24       	eor	r13, r13
 700:	d3 f8       	bld	r13, 3
 702:	e1 2c       	mov	r14, r1
 704:	f1 2c       	mov	r15, r1
 706:	00 e0       	ldi	r16, 0x00	; 0
 708:	10 e0       	ldi	r17, 0x00	; 0
 70a:	29 e7       	ldi	r18, 0x79	; 121
 70c:	3b e0       	ldi	r19, 0x0B	; 11
 70e:	40 e2       	ldi	r20, 0x20	; 32
 710:	50 e5       	ldi	r21, 0x50	; 80
 712:	62 e0       	ldi	r22, 0x02	; 2
 714:	70 e0       	ldi	r23, 0x00	; 0
 716:	80 e0       	ldi	r24, 0x00	; 0
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	55 dd       	rcall	.-1366   	; 0x1c6 <ir_sequence_AC>
		        }break;
 71c:	0f 90       	pop	r0
 71e:	0f 90       	pop	r0
 720:	66 c0       	rjmp	.+204    	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
		case 28:{
			       //Data - 0x250200C79 LSB first, 0x10001008  LSB first
			       ir_sequence_AC(0x250200C79,0x10001008,35,31);
 722:	1f 92       	push	r1
 724:	8f e1       	ldi	r24, 0x1F	; 31
 726:	8f 93       	push	r24
 728:	0f 2e       	mov	r0, r31
 72a:	f3 e2       	ldi	r31, 0x23	; 35
 72c:	8f 2e       	mov	r8, r31
 72e:	91 2c       	mov	r9, r1
 730:	f0 2d       	mov	r31, r0
 732:	68 94       	set
 734:	aa 24       	eor	r10, r10
 736:	a3 f8       	bld	r10, 3
 738:	68 94       	set
 73a:	bb 24       	eor	r11, r11
 73c:	b4 f8       	bld	r11, 4
 73e:	c1 2c       	mov	r12, r1
 740:	68 94       	set
 742:	dd 24       	eor	r13, r13
 744:	d4 f8       	bld	r13, 4
 746:	e1 2c       	mov	r14, r1
 748:	f1 2c       	mov	r15, r1
 74a:	00 e0       	ldi	r16, 0x00	; 0
 74c:	10 e0       	ldi	r17, 0x00	; 0
 74e:	29 e7       	ldi	r18, 0x79	; 121
 750:	3c e0       	ldi	r19, 0x0C	; 12
 752:	40 e2       	ldi	r20, 0x20	; 32
 754:	50 e5       	ldi	r21, 0x50	; 80
 756:	62 e0       	ldi	r22, 0x02	; 2
 758:	70 e0       	ldi	r23, 0x00	; 0
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	33 dd       	rcall	.-1434   	; 0x1c6 <ir_sequence_AC>
		        }break;
 760:	0f 90       	pop	r0
 762:	0f 90       	pop	r0
 764:	44 c0       	rjmp	.+136    	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
		case 29:{
			       //Data - 0x250200D79 LSB first, 0x18001008  LSB first
			       ir_sequence_AC(0x250200D79,0x18001008,35,31);
 766:	1f 92       	push	r1
 768:	8f e1       	ldi	r24, 0x1F	; 31
 76a:	8f 93       	push	r24
 76c:	0f 2e       	mov	r0, r31
 76e:	f3 e2       	ldi	r31, 0x23	; 35
 770:	8f 2e       	mov	r8, r31
 772:	91 2c       	mov	r9, r1
 774:	f0 2d       	mov	r31, r0
 776:	68 94       	set
 778:	aa 24       	eor	r10, r10
 77a:	a3 f8       	bld	r10, 3
 77c:	68 94       	set
 77e:	bb 24       	eor	r11, r11
 780:	b4 f8       	bld	r11, 4
 782:	c1 2c       	mov	r12, r1
 784:	0f 2e       	mov	r0, r31
 786:	f8 e1       	ldi	r31, 0x18	; 24
 788:	df 2e       	mov	r13, r31
 78a:	f0 2d       	mov	r31, r0
 78c:	e1 2c       	mov	r14, r1
 78e:	f1 2c       	mov	r15, r1
 790:	00 e0       	ldi	r16, 0x00	; 0
 792:	10 e0       	ldi	r17, 0x00	; 0
 794:	29 e7       	ldi	r18, 0x79	; 121
 796:	3d e0       	ldi	r19, 0x0D	; 13
 798:	40 e2       	ldi	r20, 0x20	; 32
 79a:	50 e5       	ldi	r21, 0x50	; 80
 79c:	62 e0       	ldi	r22, 0x02	; 2
 79e:	70 e0       	ldi	r23, 0x00	; 0
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	10 dd       	rcall	.-1504   	; 0x1c6 <ir_sequence_AC>
		        }break;
 7a6:	0f 90       	pop	r0
 7a8:	0f 90       	pop	r0
 7aa:	21 c0       	rjmp	.+66     	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
		case 30:{
			       //Data - 0x250200E79 LSB first, 0x20001008  LSB first
			       ir_sequence_AC(0x250200E79,0x20001008,35,31);
 7ac:	1f 92       	push	r1
 7ae:	8f e1       	ldi	r24, 0x1F	; 31
 7b0:	8f 93       	push	r24
 7b2:	0f 2e       	mov	r0, r31
 7b4:	f3 e2       	ldi	r31, 0x23	; 35
 7b6:	8f 2e       	mov	r8, r31
 7b8:	91 2c       	mov	r9, r1
 7ba:	f0 2d       	mov	r31, r0
 7bc:	68 94       	set
 7be:	aa 24       	eor	r10, r10
 7c0:	a3 f8       	bld	r10, 3
 7c2:	68 94       	set
 7c4:	bb 24       	eor	r11, r11
 7c6:	b4 f8       	bld	r11, 4
 7c8:	c1 2c       	mov	r12, r1
 7ca:	68 94       	set
 7cc:	dd 24       	eor	r13, r13
 7ce:	d5 f8       	bld	r13, 5
 7d0:	e1 2c       	mov	r14, r1
 7d2:	f1 2c       	mov	r15, r1
 7d4:	00 e0       	ldi	r16, 0x00	; 0
 7d6:	10 e0       	ldi	r17, 0x00	; 0
 7d8:	29 e7       	ldi	r18, 0x79	; 121
 7da:	3e e0       	ldi	r19, 0x0E	; 14
 7dc:	40 e2       	ldi	r20, 0x20	; 32
 7de:	50 e5       	ldi	r21, 0x50	; 80
 7e0:	62 e0       	ldi	r22, 0x02	; 2
 7e2:	70 e0       	ldi	r23, 0x00	; 0
 7e4:	80 e0       	ldi	r24, 0x00	; 0
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	ee dc       	rcall	.-1572   	; 0x1c6 <ir_sequence_AC>
		        }break;
 7ea:	0f 90       	pop	r0
 7ec:	0f 90       	pop	r0
		default:
		         break;
	}
}
 7ee:	1f 91       	pop	r17
 7f0:	0f 91       	pop	r16
 7f2:	ff 90       	pop	r15
 7f4:	ef 90       	pop	r14
 7f6:	df 90       	pop	r13
 7f8:	cf 90       	pop	r12
 7fa:	bf 90       	pop	r11
 7fc:	af 90       	pop	r10
 7fe:	9f 90       	pop	r9
 800:	8f 90       	pop	r8
 802:	08 95       	ret

00000804 <ir_sequence>:
 *@brief : function to call IR command sequence based on device selected
 *@param : device selected, command to perform
 *@retval : None
 *@note : send command based on device selected and button pressed
************************************************************************/
void ir_sequence(device_t device,ir_commands_t command){
 804:	8f 92       	push	r8
 806:	9f 92       	push	r9
 808:	af 92       	push	r10
 80a:	bf 92       	push	r11
 80c:	cf 92       	push	r12
 80e:	df 92       	push	r13
 810:	ef 92       	push	r14
 812:	ff 92       	push	r15
 814:	0f 93       	push	r16
 816:	1f 93       	push	r17
	if(device==AC){
 818:	81 30       	cpi	r24, 0x01	; 1
 81a:	09 f0       	breq	.+2      	; 0x81e <ir_sequence+0x1a>
 81c:	61 c0       	rjmp	.+194    	; 0x8e0 <ir_sequence+0xdc>
		if(command==POWER_ON){           //send power on for AC command
 81e:	61 11       	cpse	r22, r1
 820:	23 c0       	rjmp	.+70     	; 0x868 <ir_sequence+0x64>
			//Data - 0x250200659 LSB first, 0x60001008  LSB first
			ir_sequence_AC(0x250200659,0x60001008,35,31);
 822:	1f 92       	push	r1
 824:	8f e1       	ldi	r24, 0x1F	; 31
 826:	8f 93       	push	r24
 828:	0f 2e       	mov	r0, r31
 82a:	f3 e2       	ldi	r31, 0x23	; 35
 82c:	8f 2e       	mov	r8, r31
 82e:	91 2c       	mov	r9, r1
 830:	f0 2d       	mov	r31, r0
 832:	68 94       	set
 834:	aa 24       	eor	r10, r10
 836:	a3 f8       	bld	r10, 3
 838:	68 94       	set
 83a:	bb 24       	eor	r11, r11
 83c:	b4 f8       	bld	r11, 4
 83e:	c1 2c       	mov	r12, r1
 840:	0f 2e       	mov	r0, r31
 842:	f0 e6       	ldi	r31, 0x60	; 96
 844:	df 2e       	mov	r13, r31
 846:	f0 2d       	mov	r31, r0
 848:	e1 2c       	mov	r14, r1
 84a:	f1 2c       	mov	r15, r1
 84c:	00 e0       	ldi	r16, 0x00	; 0
 84e:	10 e0       	ldi	r17, 0x00	; 0
 850:	29 e5       	ldi	r18, 0x59	; 89
 852:	36 e0       	ldi	r19, 0x06	; 6
 854:	40 e2       	ldi	r20, 0x20	; 32
 856:	50 e5       	ldi	r21, 0x50	; 80
 858:	62 e0       	ldi	r22, 0x02	; 2
 85a:	70 e0       	ldi	r23, 0x00	; 0
 85c:	80 e0       	ldi	r24, 0x00	; 0
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	b2 dc       	rcall	.-1692   	; 0x1c6 <ir_sequence_AC>
 862:	0f 90       	pop	r0
 864:	0f 90       	pop	r0
 866:	61 c0       	rjmp	.+194    	; 0x92a <ir_sequence+0x126>
		}else if(command==POWER_OFF){    //send power off for AC command
 868:	61 30       	cpi	r22, 0x01	; 1
 86a:	11 f5       	brne	.+68     	; 0x8b0 <ir_sequence+0xac>
			//Data - 0x250200651 LSB first 0x20001008  LSB first
			ir_sequence_AC(0x250200651,0x20001008,35,31);
 86c:	1f 92       	push	r1
 86e:	8f e1       	ldi	r24, 0x1F	; 31
 870:	8f 93       	push	r24
 872:	0f 2e       	mov	r0, r31
 874:	f3 e2       	ldi	r31, 0x23	; 35
 876:	8f 2e       	mov	r8, r31
 878:	91 2c       	mov	r9, r1
 87a:	f0 2d       	mov	r31, r0
 87c:	68 94       	set
 87e:	aa 24       	eor	r10, r10
 880:	a3 f8       	bld	r10, 3
 882:	68 94       	set
 884:	bb 24       	eor	r11, r11
 886:	b4 f8       	bld	r11, 4
 888:	c1 2c       	mov	r12, r1
 88a:	68 94       	set
 88c:	dd 24       	eor	r13, r13
 88e:	d5 f8       	bld	r13, 5
 890:	e1 2c       	mov	r14, r1
 892:	f1 2c       	mov	r15, r1
 894:	00 e0       	ldi	r16, 0x00	; 0
 896:	10 e0       	ldi	r17, 0x00	; 0
 898:	21 e5       	ldi	r18, 0x51	; 81
 89a:	36 e0       	ldi	r19, 0x06	; 6
 89c:	40 e2       	ldi	r20, 0x20	; 32
 89e:	50 e5       	ldi	r21, 0x50	; 80
 8a0:	62 e0       	ldi	r22, 0x02	; 2
 8a2:	70 e0       	ldi	r23, 0x00	; 0
 8a4:	80 e0       	ldi	r24, 0x00	; 0
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	8e dc       	rcall	.-1764   	; 0x1c6 <ir_sequence_AC>
 8aa:	0f 90       	pop	r0
 8ac:	0f 90       	pop	r0
 8ae:	3d c0       	rjmp	.+122    	; 0x92a <ir_sequence+0x126>
		}else if(command==PLUS){
 8b0:	62 30       	cpi	r22, 0x02	; 2
 8b2:	59 f4       	brne	.+22     	; 0x8ca <ir_sequence+0xc6>
			if(temperature<30){          //max temperature - 30 degree
 8b4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <temperature>
 8b8:	8e 31       	cpi	r24, 0x1E	; 30
 8ba:	18 f4       	brcc	.+6      	; 0x8c2 <ir_sequence+0xbe>
				temperature++;
 8bc:	8f 5f       	subi	r24, 0xFF	; 255
 8be:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <temperature>
			}
			ir_sequence_ACtemp(temperature);
 8c2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <temperature>
 8c6:	77 dd       	rcall	.-1298   	; 0x3b6 <ir_sequence_ACtemp>
 8c8:	30 c0       	rjmp	.+96     	; 0x92a <ir_sequence+0x126>
		}else{
			if(temperature>16){          //min temperature - 16 degree
 8ca:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <temperature>
 8ce:	81 31       	cpi	r24, 0x11	; 17
 8d0:	18 f0       	brcs	.+6      	; 0x8d8 <ir_sequence+0xd4>
				temperature--;
 8d2:	81 50       	subi	r24, 0x01	; 1
 8d4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <temperature>
			}
			ir_sequence_ACtemp(temperature);
 8d8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <temperature>
 8dc:	6c dd       	rcall	.-1320   	; 0x3b6 <ir_sequence_ACtemp>
 8de:	25 c0       	rjmp	.+74     	; 0x92a <ir_sequence+0x126>
		}
		
	}else if(device==TV){
 8e0:	81 11       	cpse	r24, r1
 8e2:	22 c0       	rjmp	.+68     	; 0x928 <ir_sequence+0x124>
		if((command==POWER_ON) || (command==POWER_OFF)){
 8e4:	62 30       	cpi	r22, 0x02	; 2
 8e6:	50 f4       	brcc	.+20     	; 0x8fc <ir_sequence+0xf8>
			//Data - address & it's inverse - 0x7F  0x00 LSB first, command & it's inverse - 0xF5  0x0A  LSB first 
			ir_sequence_TV(0x7F00,0xF50A,16,16);
 8e8:	20 e1       	ldi	r18, 0x10	; 16
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	40 e1       	ldi	r20, 0x10	; 16
 8ee:	50 e0       	ldi	r21, 0x00	; 0
 8f0:	6a e0       	ldi	r22, 0x0A	; 10
 8f2:	75 ef       	ldi	r23, 0xF5	; 245
 8f4:	80 e0       	ldi	r24, 0x00	; 0
 8f6:	9f e7       	ldi	r25, 0x7F	; 127
 8f8:	dd dc       	rcall	.-1606   	; 0x2b4 <ir_sequence_TV>
 8fa:	17 c0       	rjmp	.+46     	; 0x92a <ir_sequence+0x126>
		}else if(command==PLUS){
 8fc:	62 30       	cpi	r22, 0x02	; 2
 8fe:	51 f4       	brne	.+20     	; 0x914 <ir_sequence+0x110>
			//Data - address & it's inverse - 0x7F  0x00 LSB first, command & it's inverse - 0xA7  0x58  LSB first
			ir_sequence_TV(0x7F00,0xA758,16,16);
 900:	20 e1       	ldi	r18, 0x10	; 16
 902:	30 e0       	ldi	r19, 0x00	; 0
 904:	40 e1       	ldi	r20, 0x10	; 16
 906:	50 e0       	ldi	r21, 0x00	; 0
 908:	68 e5       	ldi	r22, 0x58	; 88
 90a:	77 ea       	ldi	r23, 0xA7	; 167
 90c:	80 e0       	ldi	r24, 0x00	; 0
 90e:	9f e7       	ldi	r25, 0x7F	; 127
 910:	d1 dc       	rcall	.-1630   	; 0x2b4 <ir_sequence_TV>
 912:	0b c0       	rjmp	.+22     	; 0x92a <ir_sequence+0x126>
		}else{
			//Data - address & it's inverse - 0x7F  0x00 LSB first, command & it's inverse - 0xA4  0x5B  LSB first
			ir_sequence_TV(0x7F00,0xA45B,16,16);
 914:	20 e1       	ldi	r18, 0x10	; 16
 916:	30 e0       	ldi	r19, 0x00	; 0
 918:	40 e1       	ldi	r20, 0x10	; 16
 91a:	50 e0       	ldi	r21, 0x00	; 0
 91c:	6b e5       	ldi	r22, 0x5B	; 91
 91e:	74 ea       	ldi	r23, 0xA4	; 164
 920:	80 e0       	ldi	r24, 0x00	; 0
 922:	9f e7       	ldi	r25, 0x7F	; 127
 924:	c7 dc       	rcall	.-1650   	; 0x2b4 <ir_sequence_TV>
 926:	01 c0       	rjmp	.+2      	; 0x92a <ir_sequence+0x126>
		}
		
	}else{
		_NOP();
 928:	00 00       	nop
	}
 92a:	1f 91       	pop	r17
 92c:	0f 91       	pop	r16
 92e:	ff 90       	pop	r15
 930:	ef 90       	pop	r14
 932:	df 90       	pop	r13
 934:	cf 90       	pop	r12
 936:	bf 90       	pop	r11
 938:	af 90       	pop	r10
 93a:	9f 90       	pop	r9
 93c:	8f 90       	pop	r8
 93e:	08 95       	ret

00000940 <main>:
		******************PB2 - Toggle Switch(TV/AC)****************
		******************PB1 - Power Button(TV/AC)*****************
		*****************PB4 - Volume+(TV)/Temp+(AC)****************
		*****************PB3 - Volume-(TV)/Temp-(AC)****************
		***********************************************************/
		MCUCR &= ~(1<<PUD);
 940:	85 b7       	in	r24, 0x35	; 53
 942:	8f 7b       	andi	r24, 0xBF	; 191
 944:	85 bf       	out	0x35, r24	; 53
		DDRB &= ~(1<<DDB2) | ~(1<<DDB3) | ~(1<<DDB4) | ~(1<<DDB1) ;   //PB1 PB2 PB3 PB4 as input pins 
 946:	87 b3       	in	r24, 0x17	; 23
 948:	87 bb       	out	0x17, r24	; 23
		PORTB |=  (1<<PB2);                                           //pullup enable for PB2 
 94a:	88 b3       	in	r24, 0x18	; 24
 94c:	84 60       	ori	r24, 0x04	; 4
 94e:	88 bb       	out	0x18, r24	; 24
		
		/*Timer 0 (PWM output)*/
		TCNT0 = 0;            //Timer0 counter init
 950:	12 be       	out	0x32, r1	; 50
		TCCR0A=0;             //Timer0 output compare init
 952:	1a bc       	out	0x2a, r1	; 42
		TCCR0B=0; 
 954:	13 be       	out	0x33, r1	; 51
		
		TCCR0A |=(1<<COM0A0); //Timer0 in toggle mode 
 956:	8a b5       	in	r24, 0x2a	; 42
 958:	80 64       	ori	r24, 0x40	; 64
 95a:	8a bd       	out	0x2a, r24	; 42
		TCCR0A |=(1<<WGM01);  //Start timer 0 in CTC mode
 95c:	8a b5       	in	r24, 0x2a	; 42
 95e:	82 60       	ori	r24, 0x02	; 2
 960:	8a bd       	out	0x2a, r24	; 42
		TCCR0B |= (1 << CS00);
 962:	83 b7       	in	r24, 0x33	; 51
 964:	81 60       	ori	r24, 0x01	; 1
 966:	83 bf       	out	0x33, r24	; 51
		
		/*Timer 1 (millis counter)*/
		TCNT1 = 0;
 968:	1f bc       	out	0x2f, r1	; 47
		TCCR1 |= (1<<CS12) | (1<<CS11);     //Prescaler - 32, ARR - 256
 96a:	80 b7       	in	r24, 0x30	; 48
 96c:	86 60       	ori	r24, 0x06	; 6
 96e:	80 bf       	out	0x30, r24	; 48
		cli();
 970:	f8 94       	cli
		TIMSK |= (1<<TOIE1);                //Overflow interrupt 
 972:	89 b7       	in	r24, 0x39	; 57
 974:	84 60       	ori	r24, 0x04	; 4
 976:	89 bf       	out	0x39, r24	; 57
		sei();
 978:	78 94       	sei
	    device_t device;
		ir_commands_t command; 
		
		uint32_t button1_millis = 0;
		uint32_t button2_millis = 0;
		uint32_t button3_millis = 0;
 97a:	81 2c       	mov	r8, r1
 97c:	91 2c       	mov	r9, r1
 97e:	54 01       	movw	r10, r8
	    pin_status_t portb;
	    device_t device;
		ir_commands_t command; 
		
		uint32_t button1_millis = 0;
		uint32_t button2_millis = 0;
 980:	41 2c       	mov	r4, r1
 982:	51 2c       	mov	r5, r1
 984:	32 01       	movw	r6, r4
    /* Replace with your application code */
	    pin_status_t portb;
	    device_t device;
		ir_commands_t command; 
		
		uint32_t button1_millis = 0;
 986:	c1 2c       	mov	r12, r1
 988:	d1 2c       	mov	r13, r1
 98a:	76 01       	movw	r14, r12
		
		while(1)
		{
		    static uint8_t power_button_state = 0;
			
			portb.pinB = (PINB);         //read gpio portB
 98c:	36 b3       	in	r19, 0x16	; 22
			
			//select device to be controlled (TV or AC) PB2 toggle switch
 			if(portb.pin2==0){           
 98e:	32 fd       	sbrc	r19, 2
 990:	02 c0       	rjmp	.+4      	; 0x996 <main+0x56>
 				device = TV;  
 992:	20 e0       	ldi	r18, 0x00	; 0
 994:	01 c0       	rjmp	.+2      	; 0x998 <main+0x58>
 			}else{
 				device = AC;
 996:	21 e0       	ldi	r18, 0x01	; 1
 			}
			
			/******button sequence******/
			if(portb.pin1!=last_button_state[0]){           //PB1 button pressed
 998:	31 fb       	bst	r19, 1
 99a:	88 27       	eor	r24, r24
 99c:	80 f9       	bld	r24, 0
 99e:	c8 2f       	mov	r28, r24
 9a0:	80 e0       	ldi	r24, 0x00	; 0
 9a2:	d8 2f       	mov	r29, r24
 9a4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <last_button_state>
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	c8 17       	cp	r28, r24
 9ac:	d9 07       	cpc	r29, r25
 9ae:	59 f0       	breq	.+22     	; 0x9c6 <main+0x86>
				button1_millis = millis;
 9b0:	c0 90 6c 00 	lds	r12, 0x006C	; 0x80006c <millis>
 9b4:	d0 90 6d 00 	lds	r13, 0x006D	; 0x80006d <millis+0x1>
 9b8:	e0 90 6e 00 	lds	r14, 0x006E	; 0x80006e <millis+0x2>
 9bc:	f0 90 6f 00 	lds	r15, 0x006F	; 0x80006f <millis+0x3>
				current_button_state[0] = 0;
 9c0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 9c4:	2b c0       	rjmp	.+86     	; 0xa1c <main+0xdc>
			}else if(portb.pin3!=last_button_state[1]){     //PB3 button pressed
 9c6:	33 fb       	bst	r19, 3
 9c8:	00 27       	eor	r16, r16
 9ca:	00 f9       	bld	r16, 0
 9cc:	10 e0       	ldi	r17, 0x00	; 0
 9ce:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <last_button_state+0x1>
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	08 17       	cp	r16, r24
 9d6:	19 07       	cpc	r17, r25
 9d8:	59 f0       	breq	.+22     	; 0x9f0 <main+0xb0>
				button2_millis = millis;
 9da:	40 90 6c 00 	lds	r4, 0x006C	; 0x80006c <millis>
 9de:	50 90 6d 00 	lds	r5, 0x006D	; 0x80006d <millis+0x1>
 9e2:	60 90 6e 00 	lds	r6, 0x006E	; 0x80006e <millis+0x2>
 9e6:	70 90 6f 00 	lds	r7, 0x006F	; 0x80006f <millis+0x3>
				current_button_state[1] = 0;
 9ea:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 9ee:	16 c0       	rjmp	.+44     	; 0xa1c <main+0xdc>
			}else if(portb.pin4!=last_button_state[2]){     //PB4 button pressed
 9f0:	34 fb       	bst	r19, 4
 9f2:	22 24       	eor	r2, r2
 9f4:	20 f8       	bld	r2, 0
 9f6:	31 2c       	mov	r3, r1
 9f8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <last_button_state+0x2>
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	28 16       	cp	r2, r24
 a00:	39 06       	cpc	r3, r25
 a02:	59 f0       	breq	.+22     	; 0xa1a <main+0xda>
				button3_millis = millis;
 a04:	80 90 6c 00 	lds	r8, 0x006C	; 0x80006c <millis>
 a08:	90 90 6d 00 	lds	r9, 0x006D	; 0x80006d <millis+0x1>
 a0c:	a0 90 6e 00 	lds	r10, 0x006E	; 0x80006e <millis+0x2>
 a10:	b0 90 6f 00 	lds	r11, 0x006F	; 0x80006f <millis+0x3>
				current_button_state[2] = 0;
 a14:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 a18:	01 c0       	rjmp	.+2      	; 0xa1c <main+0xdc>
			}else{
				_NOP();                                     
 a1a:	00 00       	nop
			}
			
			if((millis-button1_millis)>debounceDelay){
 a1c:	40 91 6c 00 	lds	r20, 0x006C	; 0x80006c <millis>
 a20:	50 91 6d 00 	lds	r21, 0x006D	; 0x80006d <millis+0x1>
 a24:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <millis+0x2>
 a28:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <millis+0x3>
 a2c:	db 01       	movw	r26, r22
 a2e:	ca 01       	movw	r24, r20
 a30:	8c 19       	sub	r24, r12
 a32:	9d 09       	sbc	r25, r13
 a34:	ae 09       	sbc	r26, r14
 a36:	bf 09       	sbc	r27, r15
 a38:	cd 97       	sbiw	r24, 0x3d	; 61
 a3a:	a1 05       	cpc	r26, r1
 a3c:	b1 05       	cpc	r27, r1
 a3e:	38 f0       	brcs	.+14     	; 0xa4e <main+0x10e>
				
				if(current_button_state[0]==0){					
 a40:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 a44:	81 11       	cpse	r24, r1
 a46:	03 c0       	rjmp	.+6      	; 0xa4e <main+0x10e>
					button_ispressed[0] = 1;
 a48:	81 e0       	ldi	r24, 0x01	; 1
 a4a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <button_ispressed>
				}
			}
			
			if((millis-button2_millis)>debounceDelay){
 a4e:	db 01       	movw	r26, r22
 a50:	ca 01       	movw	r24, r20
 a52:	84 19       	sub	r24, r4
 a54:	95 09       	sbc	r25, r5
 a56:	a6 09       	sbc	r26, r6
 a58:	b7 09       	sbc	r27, r7
 a5a:	cd 97       	sbiw	r24, 0x3d	; 61
 a5c:	a1 05       	cpc	r26, r1
 a5e:	b1 05       	cpc	r27, r1
 a60:	38 f0       	brcs	.+14     	; 0xa70 <main+0x130>
				
				if(current_button_state[1]==0){					
 a62:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 a66:	81 11       	cpse	r24, r1
 a68:	03 c0       	rjmp	.+6      	; 0xa70 <main+0x130>
					button_ispressed[1] = 1;
 a6a:	81 e0       	ldi	r24, 0x01	; 1
 a6c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <button_ispressed+0x1>
				}
			}
			
			if((millis-button3_millis)>debounceDelay){
 a70:	48 19       	sub	r20, r8
 a72:	59 09       	sbc	r21, r9
 a74:	6a 09       	sbc	r22, r10
 a76:	7b 09       	sbc	r23, r11
 a78:	4d 33       	cpi	r20, 0x3D	; 61
 a7a:	51 05       	cpc	r21, r1
 a7c:	61 05       	cpc	r22, r1
 a7e:	71 05       	cpc	r23, r1
 a80:	38 f0       	brcs	.+14     	; 0xa90 <main+0x150>
				
				if(current_button_state[2]==0){					
 a82:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 a86:	81 11       	cpse	r24, r1
 a88:	03 c0       	rjmp	.+6      	; 0xa90 <main+0x150>
					button_ispressed[2] = 1;
 a8a:	81 e0       	ldi	r24, 0x01	; 1
 a8c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <button_ispressed+0x2>
				}
			}
			
			if(button_ispressed[0]==1){        //PB1 button
 a90:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <button_ispressed>
 a94:	81 30       	cpi	r24, 0x01	; 1
 a96:	b1 f4       	brne	.+44     	; 0xac4 <main+0x184>
				//_delay_ms(100);
 				if(power_button_state==0){     //turn on command
 a98:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 a9c:	81 11       	cpse	r24, r1
 a9e:	07 c0       	rjmp	.+14     	; 0xaae <main+0x16e>
  					command = POWER_ON;
  					ir_sequence(device,command);
 aa0:	60 e0       	ldi	r22, 0x00	; 0
 aa2:	82 2f       	mov	r24, r18
 aa4:	af de       	rcall	.-674    	; 0x804 <ir_sequence>
  					
  					power_button_state=1;
 aa6:	81 e0       	ldi	r24, 0x01	; 1
 aa8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
 aac:	05 c0       	rjmp	.+10     	; 0xab8 <main+0x178>
				}else{                         //turn off command
  					command = POWER_OFF;
 					ir_sequence(device,command);
 aae:	61 e0       	ldi	r22, 0x01	; 1
 ab0:	82 2f       	mov	r24, r18
 ab2:	a8 de       	rcall	.-688    	; 0x804 <ir_sequence>
 					  					
  					power_button_state=0;      
 ab4:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
				}
				
				button_ispressed[0] = 0;
 ab8:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <button_ispressed>
				current_button_state[0] = 1;
 abc:	81 e0       	ldi	r24, 0x01	; 1
 abe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 ac2:	64 cf       	rjmp	.-312    	; 0x98c <main+0x4c>
		   }else if(button_ispressed[1]==1){     //PB3 button
 ac4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <button_ispressed+0x1>
 ac8:	81 30       	cpi	r24, 0x01	; 1
 aca:	49 f4       	brne	.+18     	; 0xade <main+0x19e>
				//_delay_ms(100);
			    command = MINUS;                 //temperature/volume minus
			    ir_sequence(device,command);
 acc:	63 e0       	ldi	r22, 0x03	; 3
 ace:	82 2f       	mov	r24, r18
 ad0:	99 de       	rcall	.-718    	; 0x804 <ir_sequence>
				
				button_ispressed[1] = 0;
 ad2:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <button_ispressed+0x1>
				current_button_state[1] = 1;
 ad6:	81 e0       	ldi	r24, 0x01	; 1
 ad8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 adc:	57 cf       	rjmp	.-338    	; 0x98c <main+0x4c>
		   }else if(button_ispressed[2]==1){     //PB4 button 
 ade:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <button_ispressed+0x2>
 ae2:	81 30       	cpi	r24, 0x01	; 1
 ae4:	49 f4       	brne	.+18     	; 0xaf8 <main+0x1b8>
 				//_delay_ms(100);
				command = PLUS;                  //temperature/volume plus
				ir_sequence(device,command);	
 ae6:	62 e0       	ldi	r22, 0x02	; 2
 ae8:	82 2f       	mov	r24, r18
 aea:	8c de       	rcall	.-744    	; 0x804 <ir_sequence>
				
				button_ispressed[2] = 0;
 aec:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <button_ispressed+0x2>
				current_button_state[2] = 1;
 af0:	81 e0       	ldi	r24, 0x01	; 1
 af2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 af6:	4a cf       	rjmp	.-364    	; 0x98c <main+0x4c>
    	   }else{
				_NOP();
 af8:	00 00       	nop
 afa:	48 cf       	rjmp	.-368    	; 0x98c <main+0x4c>

00000afc <__ashrdi3>:
 afc:	97 fb       	bst	r25, 7
 afe:	10 f8       	bld	r1, 0

00000b00 <__lshrdi3>:
 b00:	16 94       	lsr	r1
 b02:	00 08       	sbc	r0, r0
 b04:	0f 93       	push	r16
 b06:	08 30       	cpi	r16, 0x08	; 8
 b08:	98 f0       	brcs	.+38     	; 0xb30 <__lshrdi3+0x30>
 b0a:	08 50       	subi	r16, 0x08	; 8
 b0c:	23 2f       	mov	r18, r19
 b0e:	34 2f       	mov	r19, r20
 b10:	45 2f       	mov	r20, r21
 b12:	56 2f       	mov	r21, r22
 b14:	67 2f       	mov	r22, r23
 b16:	78 2f       	mov	r23, r24
 b18:	89 2f       	mov	r24, r25
 b1a:	90 2d       	mov	r25, r0
 b1c:	f4 cf       	rjmp	.-24     	; 0xb06 <__lshrdi3+0x6>
 b1e:	05 94       	asr	r0
 b20:	97 95       	ror	r25
 b22:	87 95       	ror	r24
 b24:	77 95       	ror	r23
 b26:	67 95       	ror	r22
 b28:	57 95       	ror	r21
 b2a:	47 95       	ror	r20
 b2c:	37 95       	ror	r19
 b2e:	27 95       	ror	r18
 b30:	0a 95       	dec	r16
 b32:	aa f7       	brpl	.-22     	; 0xb1e <__lshrdi3+0x1e>
 b34:	0f 91       	pop	r16
 b36:	08 95       	ret

00000b38 <__cmpdi2_s8>:
 b38:	00 24       	eor	r0, r0
 b3a:	a7 fd       	sbrc	r26, 7
 b3c:	00 94       	com	r0
 b3e:	2a 17       	cp	r18, r26
 b40:	30 05       	cpc	r19, r0
 b42:	40 05       	cpc	r20, r0
 b44:	50 05       	cpc	r21, r0
 b46:	60 05       	cpc	r22, r0
 b48:	70 05       	cpc	r23, r0
 b4a:	80 05       	cpc	r24, r0
 b4c:	90 05       	cpc	r25, r0
 b4e:	08 95       	ret

00000b50 <_exit>:
 b50:	f8 94       	cli

00000b52 <__stop_program>:
 b52:	ff cf       	rjmp	.-2      	; 0xb52 <__stop_program>
